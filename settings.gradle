rootProject.name = 'Shadow'

if (!System.getenv().containsKey("ANDROID_HOME")) {
    throw new RuntimeException("未定义ANDROID_HOME环境变量。" +
            "原因：Android Studio目前不支持自动为复合构建中的子构建自动创建local.properties文件。" +
            "注意：新增环境变量后，一般不会立即生效，最简单的办法是重启电脑。")
}

includeBuild 'projects/sdk/coding'
includeBuild 'projects/sdk/core'
includeBuild 'projects/sdk/dynamic'

includeTest()
includeOnlyLibrary()//可选依赖包
includePluginHelpFeedback()//帮助反馈
includePluginPublishType()//发布有类型
includePluginPublishNoType()//发布无类型
includePluginPublishSos()//发布求救

def includeTest() {
    include 'constant',
            'plugin-use-host-code-lib',
            'lib-common',
            'armscore'
    project(':constant').projectDir = file('projects/project/lib/constant')
    project(':plugin-use-host-code-lib').projectDir = file('projects/project/lib/plugin-use-host-code-lib')
    project(':lib-common').projectDir = file('projects/project/lib/lib-common')
    project(':armscore').projectDir = file('projects/project/bdjw/host/armscore')
}

def includeOnlyLibrary() {
    include 'lib-dialog-ui',
            'lib-image-picker',
            'lib-toast',
            'lib-video-cut',
            'lib-baidu-map'
    project(':lib-dialog-ui').projectDir = file('projects/project/lib/lib-dialog-ui')
    project(':lib-image-picker').projectDir = file('projects/project/lib/lib-image-picker')
    project(':lib-toast').projectDir = file('projects/project/lib/lib-toast')
    project(':lib-video-cut').projectDir = file('projects/project/lib/lib-video-cut')
    project(':lib-baidu-map').projectDir = file('projects/project/lib/lib-baidu-map')
}


def includePluginHelpFeedback() {
    include 'plugin-help-feedback-lib',
            'plugin-help-feedback',
            'plugin-help-feedback-app'
    project(':plugin-help-feedback-lib').projectDir = file('projects/project/plugin/plugin-help-feedback/plugin-help-feedback-lib')
    project(':plugin-help-feedback').projectDir = file('projects/project/plugin/plugin-help-feedback/plugin-help-feedback')
    project(':plugin-help-feedback-app').projectDir = file('projects/project/plugin/plugin-help-feedback/plugin-help-feedback-app')
}

def includePluginPublishType() {
    include 'plugin-publish-type-lib',
            'plugin-publish-type',
            'plugin-publish-type-app'
    project(':plugin-publish-type-lib').projectDir = file('projects/project/plugin/plugin-publish-type/plugin-publish-type-lib')
    project(':plugin-publish-type').projectDir = file('projects/project/plugin/plugin-publish-type/plugin-publish-type')
    project(':plugin-publish-type-app').projectDir = file('projects/project/plugin/plugin-publish-type/plugin-publish-type-app')
}

def includePluginPublishNoType() {
    include 'plugin-publish-notype-lib',
            'plugin-publish-notype',
            'plugin-publish-notype-app'
    project(':plugin-publish-notype-lib').projectDir = file('projects/project/plugin/plugin-publish-notype/plugin-publish-notype-lib')
    project(':plugin-publish-notype').projectDir = file('projects/project/plugin/plugin-publish-notype/plugin-publish-notype')
    project(':plugin-publish-notype-app').projectDir = file('projects/project/plugin/plugin-publish-notype/plugin-publish-notype-app')
}

def includePluginPublishSos() {
    include 'plugin-publish-sos-lib',
            'plugin-publish-sos',
            'plugin-publish-sos-app'
    project(':plugin-publish-sos-lib').projectDir = file('projects/project/plugin/plugin-publish-sos/plugin-publish-sos-lib')
    project(':plugin-publish-sos').projectDir = file('projects/project/plugin/plugin-publish-sos/plugin-publish-sos')
    project(':plugin-publish-sos-app').projectDir = file('projects/project/plugin/plugin-publish-sos/plugin-publish-sos-app')
}
